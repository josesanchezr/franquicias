plugins {
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java'
	id 'jacoco'  // Plugin de JaCoCo
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'dev.miku:r2dbc-mysql:0.8.2.RELEASE' // R2DBC MySQL Driver
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Dependencia de Lombok
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Logging
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	// Excluir Logback
	configurations {
		configureEach {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
	}

	// DevTools (opcional)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core:5.3.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = 'franquicias-app.jar'
	destinationDirectory = file("$buildDir/target")
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'**/controllers/**',
							'**/models/**',
							'**/repositories/**',
							'**/exceptions/**',
							'**/FranquiciasApplication*'
					])
				})
		)
	}
}